from PySide2 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QDropEvent
from PyQt5.QtWidgets import QTableWidget, QAbstractItemView, QTableWidgetItem, QWidget, QHBoxLayout, QApplication
from ui import ModManagerUI
import os
import subprocess
from lxml import etree as et
import lxml.etree
import lxml.builder
from configobj import ConfigObj
from glob import glob
import os
import bs4 as bs


current_path = os.path.dirname(os.path.realpath(__file__))
#print(ConfigObj(os.path.join(current_path, "MMSettings.ini")))


class TableWidgetDragRows(QTableWidget):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setDragEnabled(True)
        self.setAcceptDrops(True)
        self.viewport().setAcceptDrops(True)
        self.setDragDropOverwriteMode(False)
        self.setDropIndicatorShown(True)

        self.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setDragDropMode(QAbstractItemView.InternalMove)

    def dropEvent(self, event: QDropEvent):
        if not event.isAccepted() and event.source() == self:
            drop_row = self.drop_on(event)

            rows = sorted(set(item.row() for item in self.selectedItems()))
            rows_to_move = [[QTableWidgetItem(self.item(row_index, column_index)) for column_index in range(self.columnCount())]
                            for row_index in rows]
            for row_index in reversed(rows):
                self.removeRow(row_index)
                if row_index < drop_row:
                    drop_row -= 1

            for row_index, data in enumerate(rows_to_move):
                row_index += drop_row
                self.insertRow(row_index)
                for column_index, column_data in enumerate(data):
                    self.setItem(row_index, column_index, column_data)
            event.accept()
            for row_index in range(len(rows_to_move)):
                self.item(drop_row + row_index, 0).setSelected(True)
                self.item(drop_row + row_index, 1).setSelected(True)
        super().dropEvent(event)


    def drop_on(self, event):
        index = self.indexAt(event.pos())
        if not index.isValid():
            return self.rowCount()

        return index.row() + 1 if self.is_below(event.pos(), index) else index.row()

    def is_below(self, pos, index):
        rect = self.visualRect(index)
        margin = 2
        if pos.y() - rect.top() < margin:
            return False
        elif rect.bottom() - pos.y() < margin:
            return True
        # noinspection PyTypeChecker
        return rect.contains(pos, True) and not (int(self.model().flags(index)) & Qt.ItemIsDropEnabled) and pos.y() >= rect.center().y()


class ModManager(ModManagerUI.Ui_MainWindow, QtWidgets.QMainWindow):

    def __init__(self):
        super(ModManager, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("Divinity: Original Sin 2 Mod Manager")
        # Buttons
        self.button_UserFolder.clicked.connect(self.select_UserFolder)
        self.button_GameFolder.clicked.connect(self.select_GameFolder)
        self.radio_DE.toggled.connect(lambda:self.select_Mode(self.radio_DE))
        self.radio_Classic.toggled.connect(lambda:self.select_Mode(self.radio_Classic))
        self.comboBox_Profiles.activated[str].connect(self.populate_LO2)
        self.button_EnableDisableMods.clicked.connect(self.EnableDisable_Button)
        self.window2 = None
        # Functions
        self.clean_LO()
        # Variables
        lar_folder = os.path.join(os.environ['USERPROFILE'], "Documents\Larian Studios")
        game_folder = os.path.join(os.environ['PROGRAMFILES(X86)'], "Steam\steamapps\common\Divinity Original Sin 2")
        gamefolder = None
        larfolder = None
        path_mods = None
        path_profiles = None
        path_exe = None
        profiles = None


        # 1: Auto insert best guess at Larian folder
        for dirs in os.listdir(lar_folder):
            if 'Divinity Original Sin 2' or 'Divinity Original Sin 2 Definitive Edition' in os.path.isdir(os.path.join(lar_folder, dirs)):
                self.textbox_UserFolder.setText(lar_folder)

        # 2: Auto insert best guess at game folder
        for dirs in os.listdir(game_folder):
            if 'bin' or 'DefEd' in os.path.isdir(os.path.join(game_folder, dirs)):
                    self.textbox_GameFolder.setText(game_folder)

    def select_UserFolder(self):
        user_path = QtWidgets.QFileDialog.getExistingDirectory(self, "Select Larian Folder")
        if user_path:
            self.textbox_UserFolder.setText(user_path)
            self.larfolder = user_path
            self.enable_select_mode()
        return larfolder

    def select_GameFolder(self):
        game_path = QtWidgets.QFileDialog.getExistingDirectory(
            self,
            "Select Game Folder"
            )
        if game_path:
            self.textbox_GameFolder.setText(game_path)
            self.gamefolder = game_path
            self.enable_select_mode()

    def enable_select_mode(self):
        if self.gamefolder and self.larfolder:
            self.radio_Classic.setEnabled(True)
            self.radio_DE.setEnabled(True)


    def select_Mode(self,b):
        if b.text() == "DE":
            # Set DE Paths
            self.inits_DE()
            self.button_Launch.setText("Launch DE")
        if b.text() == "Classic":
            # Set Clasic Paths
            self.inits_classic()
            self.button_Launch.setText("Launch Classic")

    def EnableDisable_Button(self):
        if self.window2 is None:
            self.window2 = Form2(self)
        self.window2.show()

    def inits_DE(self):
        # Paths
        self.path_profiles = os.path.join(self.larfolder, "Divinity Original Sin 2 Definitive Edition\\PlayerProfiles\\")
        self.path_mods = os.path.join(self.larfolder, "Divinity Original Sin 2 Definitive Edition\\Mods\\")
        self.path_exe = os.path.join(self.gamefolder, "DefEd\\bin\\EoCApp.exe")

        # Vars
        self.profiles = self.lst_profiles(self.path_profiles)

        # Functions

        # Enable Profiles
        self.comboBox_Profiles.setEnabled(True)
        self.tree_LoadOrder.setEnabled(True)

        # Populate Profiles
        self.populate_profiles()

    def populate_profiles(self):
        # Clean list
        self.comboBox_Profiles.clear()

        # Add a blank by default
        items = QtWidgets.QComboBox.addItem(self.comboBox_Profiles, str(" "))

        for e in self.profiles:
            if e != "Debug_Client_Profile_1":
                items = QtWidgets.QComboBox.addItem(self.comboBox_Profiles,str(e))

    def inits_classic():
        pass


    def lst_profiles(self,path):
        return next(os.walk(path))[1]

    def getModSettingsLSX(self,profile):
        modsettings = os.path.join(ini["drives"][0], ini["userfolder"],ini["user_de"],"PlayerProfiles/", ini["current_profile", "modsettings.lsx"])
        return modsettings

    def populate_LO2(self,profile):
        self.tree_LoadOrder.setEnabled(True)

        def get_loadorder():
            modsettings = os.path.join(self.path_profiles, profile, "modsettings.lsx")
            tree = et.parse(modsettings)
            installed_mods_root = tree.xpath('//node[@id="Mods"]')[0]
            imr = installed_mods_root
            installed_mods = imr.xpath('.//node[@id="ModuleShortDesc"]')
            im = installed_mods
            name_list = []

            for mname in im:
                temp = mname.xpath('.//attribute[contains(@id, "Name")]')
                name = [t.get('value') for t in temp][0]
                name_list.append(name)

            return name_list

        self.tree_LoadOrder.clear()  # Clears the Load order
        x = get_loadorder()
        #x = [x for x in range(0,10)]
        for i, e in enumerate(x):
            if str(e) != "Divinity: Original Sin 2":
                items = QtWidgets.QTreeWidgetItem(self.tree_LoadOrder)
                items.setFlags(QtCore.Qt.ItemIsSelectable |
                            QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsEnabled)
                #items.setText(0,str(i))
                items.setText(0, str(e))

    def clean_LO(self):
        self.tree_LoadOrder.clear() # Clears the Load order

    def active_profile_check():
        pass

    def profile_list_firstrun():
        '''Create a list of profiles and set up a MM folder for each'''
        pass

    def profile_list_check():
        pass

    def installed_firstrun():
        pass

    def installed_check():
        pass

    def toggle_EnableDisable():
        pass


class Form2(QWidget):
    def __init__(self, parent=None):
        super(Form2, self).__init__()

        layout = QHBoxLayout()
        self.setLayout(layout)

        self.table_widget = TableWidgetDragRows()
        layout.addWidget(self.table_widget)

        # setup table widget
        self.table_widget.setColumnCount(2)
        self.table_widget.setHorizontalHeaderLabels(['Type', 'Name'])

        items = [('Red', 'Toyota'), ('Blue', 'RV'),
                 ('Green', 'Beetle'), ('Silver', 'Chevy'), ('Black', 'BMW')]
        self.table_widget.setRowCount(len(items))
        for i, (color, model) in enumerate(items):
            self.table_widget.setItem(i, 0, QTableWidgetItem(color))
            self.table_widget.setItem(i, 1, QTableWidgetItem(model))

        self.resize(400, 400)
        self.show()


if __name__=='__main__':
    app = QtWidgets.QApplication()
    qt_app = ModManager()
    qt_app.show()
    app.exec_()
